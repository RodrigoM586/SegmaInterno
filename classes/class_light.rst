.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Light.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Light:

Light
=====

**Inherits:** :ref:`VisualInstance<class_VisualInstance>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`DirectionalLight<class_DirectionalLight>`, :ref:`OmniLight<class_OmniLight>`, :ref:`SpotLight<class_SpotLight>`

**Category:** Core

Brief Description
-----------------

Provides a base class for different kinds of light nodes.

Properties
----------

+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`              | :ref:`editor_only<class_Light_property_editor_only>`                           |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`BakeMode<enum_Light_BakeMode>` | :ref:`light_bake_mode<class_Light_property_light_bake_mode>`                   |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`            | :ref:`light_color<class_Light_property_light_color>`                           |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`int<class_int>`                | :ref:`light_cull_mask<class_Light_property_light_cull_mask>`                   |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`float<class_float>`            | :ref:`light_energy<class_Light_property_light_energy>`                         |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`float<class_float>`            | :ref:`light_indirect_energy<class_Light_property_light_indirect_energy>`       |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`              | :ref:`light_negative<class_Light_property_light_negative>`                     |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`float<class_float>`            | :ref:`light_specular<class_Light_property_light_specular>`                     |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`float<class_float>`            | :ref:`shadow_bias<class_Light_property_shadow_bias>`                           |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`Color<class_Color>`            | :ref:`shadow_color<class_Light_property_shadow_color>`                         |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`float<class_float>`            | :ref:`shadow_contact<class_Light_property_shadow_contact>`                     |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`              | :ref:`shadow_enabled<class_Light_property_shadow_enabled>`                     |
+--------------------------------------+--------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`              | :ref:`shadow_reverse_cull_face<class_Light_property_shadow_reverse_cull_face>` |
+--------------------------------------+--------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_Light_Param:

.. _class_Light_constant_PARAM_ENERGY:

.. _class_Light_constant_PARAM_INDIRECT_ENERGY:

.. _class_Light_constant_PARAM_SPECULAR:

.. _class_Light_constant_PARAM_RANGE:

.. _class_Light_constant_PARAM_ATTENUATION:

.. _class_Light_constant_PARAM_SPOT_ANGLE:

.. _class_Light_constant_PARAM_SPOT_ATTENUATION:

.. _class_Light_constant_PARAM_CONTACT_SHADOW_SIZE:

.. _class_Light_constant_PARAM_SHADOW_MAX_DISTANCE:

.. _class_Light_constant_PARAM_SHADOW_SPLIT_1_OFFSET:

.. _class_Light_constant_PARAM_SHADOW_SPLIT_2_OFFSET:

.. _class_Light_constant_PARAM_SHADOW_SPLIT_3_OFFSET:

.. _class_Light_constant_PARAM_SHADOW_NORMAL_BIAS:

.. _class_Light_constant_PARAM_SHADOW_BIAS:

.. _class_Light_constant_PARAM_SHADOW_BIAS_SPLIT_SCALE:

.. _class_Light_constant_PARAM_MAX:

enum **Param**:

- **PARAM_ENERGY** = **0**

- **PARAM_INDIRECT_ENERGY** = **1**

- **PARAM_SPECULAR** = **2**

- **PARAM_RANGE** = **3**

- **PARAM_ATTENUATION** = **4**

- **PARAM_SPOT_ANGLE** = **5**

- **PARAM_SPOT_ATTENUATION** = **6**

- **PARAM_CONTACT_SHADOW_SIZE** = **7**

- **PARAM_SHADOW_MAX_DISTANCE** = **8**

- **PARAM_SHADOW_SPLIT_1_OFFSET** = **9**

- **PARAM_SHADOW_SPLIT_2_OFFSET** = **10**

- **PARAM_SHADOW_SPLIT_3_OFFSET** = **11**

- **PARAM_SHADOW_NORMAL_BIAS** = **12**

- **PARAM_SHADOW_BIAS** = **13**

- **PARAM_SHADOW_BIAS_SPLIT_SCALE** = **14**

- **PARAM_MAX** = **15**

.. _enum_Light_BakeMode:

.. _class_Light_constant_BAKE_DISABLED:

.. _class_Light_constant_BAKE_INDIRECT:

.. _class_Light_constant_BAKE_ALL:

enum **BakeMode**:

- **BAKE_DISABLED** = **0** --- Light is ignored when baking. Note: hiding a light does *not* affect baking.

- **BAKE_INDIRECT** = **1** --- Only indirect lighting will be baked. Default value.

- **BAKE_ALL** = **2** --- Both direct and indirect light will be baked. Note: you should hide the light if you don't want it to appear twice (dynamic and baked).

Description
-----------

Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.

Tutorials
---------

- :doc:`../tutorials/3d/lights_and_shadows`

Property Descriptions
---------------------

.. _class_Light_property_editor_only:

- :ref:`bool<class_bool>` **editor_only**

+----------+------------------------+
| *Setter* | set_editor_only(value) |
+----------+------------------------+
| *Getter* | is_editor_only()       |
+----------+------------------------+

If ``true``, the light only appears in the editor and will not be visible at runtime. Default value:``false``.

.. _class_Light_property_light_bake_mode:

- :ref:`BakeMode<enum_Light_BakeMode>` **light_bake_mode**

+----------+----------------------+
| *Setter* | set_bake_mode(value) |
+----------+----------------------+
| *Getter* | get_bake_mode()      |
+----------+----------------------+

The light's bake mode. See :ref:`BakeMode<enum_Light_BakeMode>`.

.. _class_Light_property_light_color:

- :ref:`Color<class_Color>` **light_color**

+----------+------------------+
| *Setter* | set_color(value) |
+----------+------------------+
| *Getter* | get_color()      |
+----------+------------------+

The light's color.

.. _class_Light_property_light_cull_mask:

- :ref:`int<class_int>` **light_cull_mask**

+----------+----------------------+
| *Setter* | set_cull_mask(value) |
+----------+----------------------+
| *Getter* | get_cull_mask()      |
+----------+----------------------+

The light will affect objects in the selected layers.

.. _class_Light_property_light_energy:

- :ref:`float<class_float>` **light_energy**

+----------+------------------+
| *Setter* | set_param(value) |
+----------+------------------+
| *Getter* | get_param()      |
+----------+------------------+

The light's strength multiplier.

.. _class_Light_property_light_indirect_energy:

- :ref:`float<class_float>` **light_indirect_energy**

+----------+------------------+
| *Setter* | set_param(value) |
+----------+------------------+
| *Getter* | get_param()      |
+----------+------------------+

Secondary multiplier used with indirect light (light bounces). This works in baked light or GIProbe.

.. _class_Light_property_light_negative:

- :ref:`bool<class_bool>` **light_negative**

+----------+---------------------+
| *Setter* | set_negative(value) |
+----------+---------------------+
| *Getter* | is_negative()       |
+----------+---------------------+

If ``true``, the light's effect is reversed, darkening areas and casting bright shadows. Default value: ``false``.

.. _class_Light_property_light_specular:

- :ref:`float<class_float>` **light_specular**

+----------+------------------+
| *Setter* | set_param(value) |
+----------+------------------+
| *Getter* | get_param()      |
+----------+------------------+

The intensity of the specular blob in objects affected by the light. At ``0`` the light becomes a pure diffuse light.

.. _class_Light_property_shadow_bias:

- :ref:`float<class_float>` **shadow_bias**

+----------+------------------+
| *Setter* | set_param(value) |
+----------+------------------+
| *Getter* | get_param()      |
+----------+------------------+

Used to adjust shadow appearance. Too small a value results in self shadowing, while too large a value causes shadows to separate from casters. Adjust as needed.

.. _class_Light_property_shadow_color:

- :ref:`Color<class_Color>` **shadow_color**

+----------+-------------------------+
| *Setter* | set_shadow_color(value) |
+----------+-------------------------+
| *Getter* | get_shadow_color()      |
+----------+-------------------------+

The color of shadows cast by this light.

.. _class_Light_property_shadow_contact:

- :ref:`float<class_float>` **shadow_contact**

+----------+------------------+
| *Setter* | set_param(value) |
+----------+------------------+
| *Getter* | get_param()      |
+----------+------------------+

Attempts to reduce :ref:`shadow_bias<class_Light_property_shadow_bias>` gap.

.. _class_Light_property_shadow_enabled:

- :ref:`bool<class_bool>` **shadow_enabled**

+----------+-------------------+
| *Setter* | set_shadow(value) |
+----------+-------------------+
| *Getter* | has_shadow()      |
+----------+-------------------+

If ``true``, the light will cast shadows. Default value: ``false``.

.. _class_Light_property_shadow_reverse_cull_face:

- :ref:`bool<class_bool>` **shadow_reverse_cull_face**

+----------+-------------------------------------+
| *Setter* | set_shadow_reverse_cull_face(value) |
+----------+-------------------------------------+
| *Getter* | get_shadow_reverse_cull_face()      |
+----------+-------------------------------------+

