.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Line2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Line2D:

Line2D
======

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Category:** Core

Brief Description
-----------------

A 2D line.

Properties
----------

+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`LineCapMode<enum_Line2D_LineCapMode>`         | :ref:`begin_cap_mode<class_Line2D_property_begin_cap_mode>`   |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`Color<class_Color>`                           | :ref:`default_color<class_Line2D_property_default_color>`     |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`LineCapMode<enum_Line2D_LineCapMode>`         | :ref:`end_cap_mode<class_Line2D_property_end_cap_mode>`       |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`Gradient<class_Gradient>`                     | :ref:`gradient<class_Line2D_property_gradient>`               |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`LineJointMode<enum_Line2D_LineJointMode>`     | :ref:`joint_mode<class_Line2D_property_joint_mode>`           |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`PoolVector2Array<class_PoolVector2Array>`     | :ref:`points<class_Line2D_property_points>`                   |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`int<class_int>`                               | :ref:`round_precision<class_Line2D_property_round_precision>` |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`float<class_float>`                           | :ref:`sharp_limit<class_Line2D_property_sharp_limit>`         |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`Texture<class_Texture>`                       | :ref:`texture<class_Line2D_property_texture>`                 |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`LineTextureMode<enum_Line2D_LineTextureMode>` | :ref:`texture_mode<class_Line2D_property_texture_mode>`       |
+-----------------------------------------------------+---------------------------------------------------------------+
| :ref:`float<class_float>`                           | :ref:`width<class_Line2D_property_width>`                     |
+-----------------------------------------------------+---------------------------------------------------------------+

Methods
-------

+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`add_point<class_Line2D_method_add_point>` **(** :ref:`Vector2<class_Vector2>` position **)**                                            |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`         | :ref:`get_point_count<class_Line2D_method_get_point_count>` **(** **)** const                                                                 |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Vector2<class_Vector2>` | :ref:`get_point_position<class_Line2D_method_get_point_position>` **(** :ref:`int<class_int>` i **)** const                                   |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`remove_point<class_Line2D_method_remove_point>` **(** :ref:`int<class_int>` i **)**                                                     |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| void                          | :ref:`set_point_position<class_Line2D_method_set_point_position>` **(** :ref:`int<class_int>` i, :ref:`Vector2<class_Vector2>` position **)** |
+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------+

Enumerations
------------

.. _enum_Line2D_LineJointMode:

.. _class_Line2D_constant_LINE_JOINT_SHARP:

.. _class_Line2D_constant_LINE_JOINT_BEVEL:

.. _class_Line2D_constant_LINE_JOINT_ROUND:

enum **LineJointMode**:

- **LINE_JOINT_SHARP** = **0** --- The line's joints will be pointy. If ``sharp_limit`` is greater than the rotation of a joint, it becomes a bevel joint instead.

- **LINE_JOINT_BEVEL** = **1** --- The line's joints will be bevelled/chamfered.

- **LINE_JOINT_ROUND** = **2** --- The line's joints will be rounded.

.. _enum_Line2D_LineCapMode:

.. _class_Line2D_constant_LINE_CAP_NONE:

.. _class_Line2D_constant_LINE_CAP_BOX:

.. _class_Line2D_constant_LINE_CAP_ROUND:

enum **LineCapMode**:

- **LINE_CAP_NONE** = **0** --- Don't have a line cap.

- **LINE_CAP_BOX** = **1** --- Draws the line cap as a box.

- **LINE_CAP_ROUND** = **2** --- Draws the line cap as a circle.

.. _enum_Line2D_LineTextureMode:

.. _class_Line2D_constant_LINE_TEXTURE_NONE:

.. _class_Line2D_constant_LINE_TEXTURE_TILE:

.. _class_Line2D_constant_LINE_TEXTURE_STRETCH:

enum **LineTextureMode**:

- **LINE_TEXTURE_NONE** = **0** --- Takes the left pixels of the texture and renders it over the whole line.

- **LINE_TEXTURE_TILE** = **1** --- Tiles the texture over the line. The texture need to be imported with Repeat Enabled for it to work properly.

- **LINE_TEXTURE_STRETCH** = **2** --- Stretches the texture across the line. Import the texture with Repeat Disabled for best results.

Description
-----------

A line through several points in 2D space.

Property Descriptions
---------------------

.. _class_Line2D_property_begin_cap_mode:

- :ref:`LineCapMode<enum_Line2D_LineCapMode>` **begin_cap_mode**

+----------+---------------------------+
| *Setter* | set_begin_cap_mode(value) |
+----------+---------------------------+
| *Getter* | get_begin_cap_mode()      |
+----------+---------------------------+

Controls the style of the line's first point. Use ``LINE_CAP_*`` constants. Default value: ``LINE_CAP_NONE``.

.. _class_Line2D_property_default_color:

- :ref:`Color<class_Color>` **default_color**

+----------+--------------------------+
| *Setter* | set_default_color(value) |
+----------+--------------------------+
| *Getter* | get_default_color()      |
+----------+--------------------------+

The line's color. Will not be used if a gradient is set.

.. _class_Line2D_property_end_cap_mode:

- :ref:`LineCapMode<enum_Line2D_LineCapMode>` **end_cap_mode**

+----------+-------------------------+
| *Setter* | set_end_cap_mode(value) |
+----------+-------------------------+
| *Getter* | get_end_cap_mode()      |
+----------+-------------------------+

Controls the style of the line's last point. Use ``LINE_CAP_*`` constants. Default value: ``LINE_CAP_NONE``.

.. _class_Line2D_property_gradient:

- :ref:`Gradient<class_Gradient>` **gradient**

+----------+---------------------+
| *Setter* | set_gradient(value) |
+----------+---------------------+
| *Getter* | get_gradient()      |
+----------+---------------------+

The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set.

.. _class_Line2D_property_joint_mode:

- :ref:`LineJointMode<enum_Line2D_LineJointMode>` **joint_mode**

+----------+-----------------------+
| *Setter* | set_joint_mode(value) |
+----------+-----------------------+
| *Getter* | get_joint_mode()      |
+----------+-----------------------+

The style for the points between the start and the end.

.. _class_Line2D_property_points:

- :ref:`PoolVector2Array<class_PoolVector2Array>` **points**

+----------+-------------------+
| *Setter* | set_points(value) |
+----------+-------------------+
| *Getter* | get_points()      |
+----------+-------------------+

The points that form the lines. The line is drawn between every point set in this array.

.. _class_Line2D_property_round_precision:

- :ref:`int<class_int>` **round_precision**

+----------+----------------------------+
| *Setter* | set_round_precision(value) |
+----------+----------------------------+
| *Getter* | get_round_precision()      |
+----------+----------------------------+

The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round.

.. _class_Line2D_property_sharp_limit:

- :ref:`float<class_float>` **sharp_limit**

+----------+------------------------+
| *Setter* | set_sharp_limit(value) |
+----------+------------------------+
| *Getter* | get_sharp_limit()      |
+----------+------------------------+

The direction difference in radians between vector points. This value is only used if ``joint mode`` is set to ``LINE_JOINT_SHARP``.

.. _class_Line2D_property_texture:

- :ref:`Texture<class_Texture>` **texture**

+----------+--------------------+
| *Setter* | set_texture(value) |
+----------+--------------------+
| *Getter* | get_texture()      |
+----------+--------------------+

The texture used for the line's texture. Uses ``texture_mode`` for drawing style.

.. _class_Line2D_property_texture_mode:

- :ref:`LineTextureMode<enum_Line2D_LineTextureMode>` **texture_mode**

+----------+-------------------------+
| *Setter* | set_texture_mode(value) |
+----------+-------------------------+
| *Getter* | get_texture_mode()      |
+----------+-------------------------+

The style to render the ``texture`` on the line. Use ``LINE_TEXTURE_*`` constants. Default value: ``LINE_TEXTURE_NONE``.

.. _class_Line2D_property_width:

- :ref:`float<class_float>` **width**

+----------+------------------+
| *Setter* | set_width(value) |
+----------+------------------+
| *Getter* | get_width()      |
+----------+------------------+

The line's width.

Method Descriptions
-------------------

.. _class_Line2D_method_add_point:

- void **add_point** **(** :ref:`Vector2<class_Vector2>` position **)**

Add a point at the ``position``. Appends the point at the end of the line.

.. _class_Line2D_method_get_point_count:

- :ref:`int<class_int>` **get_point_count** **(** **)** const

Returns the Line2D's amount of points.

.. _class_Line2D_method_get_point_position:

- :ref:`Vector2<class_Vector2>` **get_point_position** **(** :ref:`int<class_int>` i **)** const

Returns point ``i``'s position.

.. _class_Line2D_method_remove_point:

- void **remove_point** **(** :ref:`int<class_int>` i **)**

Remove the point at index ``i`` from the line.

.. _class_Line2D_method_set_point_position:

- void **set_point_position** **(** :ref:`int<class_int>` i, :ref:`Vector2<class_Vector2>` position **)**

Overwrites the position in point ``i`` with the supplied ``position``.

