.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Area.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Area:

Area
====

**Inherits:** :ref:`CollisionObject<class_CollisionObject>` **<** :ref:`Spatial<class_Spatial>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Category:** Core

Brief Description
-----------------

General purpose area node for detection and 3D physics influence.

Properties
----------

+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`angular_damp<class_Area_property_angular_damp>`                     |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`audio_bus_name<class_Area_property_audio_bus_name>`                 |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`audio_bus_override<class_Area_property_audio_bus_override>`         |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`collision_layer<class_Area_property_collision_layer>`               |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`int<class_int>`                         | :ref:`collision_mask<class_Area_property_collision_mask>`                 |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`gravity<class_Area_property_gravity>`                               |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`gravity_distance_scale<class_Area_property_gravity_distance_scale>` |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`gravity_point<class_Area_property_gravity_point>`                   |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`Vector3<class_Vector3>`                 | :ref:`gravity_vec<class_Area_property_gravity_vec>`                       |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`linear_damp<class_Area_property_linear_damp>`                       |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`monitorable<class_Area_property_monitorable>`                       |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`monitoring<class_Area_property_monitoring>`                         |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`priority<class_Area_property_priority>`                             |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`reverb_bus_amount<class_Area_property_reverb_bus_amount>`           |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                       | :ref:`reverb_bus_enable<class_Area_property_reverb_bus_enable>`           |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`String<class_String>`                   | :ref:`reverb_bus_name<class_Area_property_reverb_bus_name>`               |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`float<class_float>`                     | :ref:`reverb_bus_uniformity<class_Area_property_reverb_bus_uniformity>`   |
+-----------------------------------------------+---------------------------------------------------------------------------+
| :ref:`SpaceOverride<enum_Area_SpaceOverride>` | :ref:`space_override<class_Area_property_space_override>`                 |
+-----------------------------------------------+---------------------------------------------------------------------------+

Methods
-------

+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`get_collision_layer_bit<class_Area_method_get_collision_layer_bit>` **(** :ref:`int<class_int>` bit **)** const                          |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`get_collision_mask_bit<class_Area_method_get_collision_mask_bit>` **(** :ref:`int<class_int>` bit **)** const                            |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_overlapping_areas<class_Area_method_get_overlapping_areas>` **(** **)** const                                                        |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>` | :ref:`get_overlapping_bodies<class_Area_method_get_overlapping_bodies>` **(** **)** const                                                      |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`overlaps_area<class_Area_method_overlaps_area>` **(** :ref:`Node<class_Node>` area **)** const                                           |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`   | :ref:`overlaps_body<class_Area_method_overlaps_body>` **(** :ref:`Node<class_Node>` body **)** const                                           |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`set_collision_layer_bit<class_Area_method_set_collision_layer_bit>` **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)** |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+
| void                      | :ref:`set_collision_mask_bit<class_Area_method_set_collision_mask_bit>` **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)**   |
+---------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_Area_signal_area_entered:

- **area_entered** **(** :ref:`Area<class_Area>` area **)**

Emitted when another area enters.

.. _class_Area_signal_area_exited:

- **area_exited** **(** :ref:`Area<class_Area>` area **)**

Emitted when another area exits.

.. _class_Area_signal_area_shape_entered:

- **area_shape_entered** **(** :ref:`int<class_int>` area_id, :ref:`Area<class_Area>` area, :ref:`int<class_int>` area_shape, :ref:`int<class_int>` self_shape **)**

Emitted when another area enters, reporting which areas overlapped.

.. _class_Area_signal_area_shape_exited:

- **area_shape_exited** **(** :ref:`int<class_int>` area_id, :ref:`Area<class_Area>` area, :ref:`int<class_int>` area_shape, :ref:`int<class_int>` self_shape **)**

Emitted when another area exits, reporting which areas were overlapping.

.. _class_Area_signal_body_entered:

- **body_entered** **(** :ref:`Node<class_Node>` body **)**

Emitted when a :ref:`PhysicsBody<class_PhysicsBody>` object enters.

.. _class_Area_signal_body_exited:

- **body_exited** **(** :ref:`Node<class_Node>` body **)**

Emitted when a :ref:`PhysicsBody<class_PhysicsBody>` object exits.

.. _class_Area_signal_body_shape_entered:

- **body_shape_entered** **(** :ref:`int<class_int>` body_id, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape, :ref:`int<class_int>` area_shape **)**

Emitted when a :ref:`PhysicsBody<class_PhysicsBody>` object enters, reporting which shapes overlapped.

.. _class_Area_signal_body_shape_exited:

- **body_shape_exited** **(** :ref:`int<class_int>` body_id, :ref:`Node<class_Node>` body, :ref:`int<class_int>` body_shape, :ref:`int<class_int>` area_shape **)**

Emitted when a :ref:`PhysicsBody<class_PhysicsBody>` object exits, reporting which shapes were overlapping.

Enumerations
------------

.. _enum_Area_SpaceOverride:

.. _class_Area_constant_SPACE_OVERRIDE_DISABLED:

.. _class_Area_constant_SPACE_OVERRIDE_COMBINE:

.. _class_Area_constant_SPACE_OVERRIDE_COMBINE_REPLACE:

.. _class_Area_constant_SPACE_OVERRIDE_REPLACE:

.. _class_Area_constant_SPACE_OVERRIDE_REPLACE_COMBINE:

enum **SpaceOverride**:

- **SPACE_OVERRIDE_DISABLED** = **0** --- This area does not affect gravity/damping.

- **SPACE_OVERRIDE_COMBINE** = **1** --- This area adds its gravity/damping values to whatever has been calculated so far (in :ref:`priority<class_Area_property_priority>` order).

- **SPACE_OVERRIDE_COMBINE_REPLACE** = **2** --- This area adds its gravity/damping values to whatever has been calculated so far (in :ref:`priority<class_Area_property_priority>` order), ignoring any lower priority areas.

- **SPACE_OVERRIDE_REPLACE** = **3** --- This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.

- **SPACE_OVERRIDE_REPLACE_COMBINE** = **4** --- This area replaces any gravity/damping calculated so far (in :ref:`priority<class_Area_property_priority>` order), but keeps calculating the rest of the areas.

Description
-----------

3D area that detects :ref:`CollisionObject<class_CollisionObject>` nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).

Property Descriptions
---------------------

.. _class_Area_property_angular_damp:

- :ref:`float<class_float>` **angular_damp**

+----------+-------------------------+
| *Setter* | set_angular_damp(value) |
+----------+-------------------------+
| *Getter* | get_angular_damp()      |
+----------+-------------------------+

The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from ``0`` (no damping) to ``1`` (full damping).

.. _class_Area_property_audio_bus_name:

- :ref:`String<class_String>` **audio_bus_name**

+----------+----------------------+
| *Setter* | set_audio_bus(value) |
+----------+----------------------+
| *Getter* | get_audio_bus()      |
+----------+----------------------+

The name of the area's audio bus.

.. _class_Area_property_audio_bus_override:

- :ref:`bool<class_bool>` **audio_bus_override**

+----------+-------------------------------+
| *Setter* | set_audio_bus_override(value) |
+----------+-------------------------------+
| *Getter* | is_overriding_audio_bus()     |
+----------+-------------------------------+

If ``true``, the area's audio bus overrides the default audio bus. Default value: ``false``.

.. _class_Area_property_collision_layer:

- :ref:`int<class_int>` **collision_layer**

+----------+----------------------------+
| *Setter* | set_collision_layer(value) |
+----------+----------------------------+
| *Getter* | get_collision_layer()      |
+----------+----------------------------+

The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also :ref:`collision_mask<class_Area_property_collision_mask>`.

.. _class_Area_property_collision_mask:

- :ref:`int<class_int>` **collision_mask**

+----------+---------------------------+
| *Setter* | set_collision_mask(value) |
+----------+---------------------------+
| *Getter* | get_collision_mask()      |
+----------+---------------------------+

The physics layers this area scans to determine collision detection.

.. _class_Area_property_gravity:

- :ref:`float<class_float>` **gravity**

+----------+--------------------+
| *Setter* | set_gravity(value) |
+----------+--------------------+
| *Getter* | get_gravity()      |
+----------+--------------------+

The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.

.. _class_Area_property_gravity_distance_scale:

- :ref:`float<class_float>` **gravity_distance_scale**

+----------+-----------------------------------+
| *Setter* | set_gravity_distance_scale(value) |
+----------+-----------------------------------+
| *Getter* | get_gravity_distance_scale()      |
+----------+-----------------------------------+

The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.

.. _class_Area_property_gravity_point:

- :ref:`bool<class_bool>` **gravity_point**

+----------+-----------------------------+
| *Setter* | set_gravity_is_point(value) |
+----------+-----------------------------+
| *Getter* | is_gravity_a_point()        |
+----------+-----------------------------+

If ``true``, gravity is calculated from a point (set via :ref:`gravity_vec<class_Area_property_gravity_vec>`). Also see :ref:`space_override<class_Area_property_space_override>`. Default value: ``false``.

.. _class_Area_property_gravity_vec:

- :ref:`Vector3<class_Vector3>` **gravity_vec**

+----------+---------------------------+
| *Setter* | set_gravity_vector(value) |
+----------+---------------------------+
| *Getter* | get_gravity_vector()      |
+----------+---------------------------+

The area's gravity vector (not normalized). If gravity is a point (see :ref:`gravity_point<class_Area_property_gravity_point>`), this will be the point of attraction.

.. _class_Area_property_linear_damp:

- :ref:`float<class_float>` **linear_damp**

+----------+------------------------+
| *Setter* | set_linear_damp(value) |
+----------+------------------------+
| *Getter* | get_linear_damp()      |
+----------+------------------------+

The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from ``0`` (no damping) to ``1`` (full damping).

.. _class_Area_property_monitorable:

- :ref:`bool<class_bool>` **monitorable**

+----------+------------------------+
| *Setter* | set_monitorable(value) |
+----------+------------------------+
| *Getter* | is_monitorable()       |
+----------+------------------------+

If ``true``, other monitoring areas can detect this area. Default value: ``true``.

.. _class_Area_property_monitoring:

- :ref:`bool<class_bool>` **monitoring**

+----------+-----------------------+
| *Setter* | set_monitoring(value) |
+----------+-----------------------+
| *Getter* | is_monitoring()       |
+----------+-----------------------+

If ``true``, the area detects bodies or areas entering and exiting it. Default value: ``true``.

.. _class_Area_property_priority:

- :ref:`float<class_float>` **priority**

+----------+---------------------+
| *Setter* | set_priority(value) |
+----------+---------------------+
| *Getter* | get_priority()      |
+----------+---------------------+

The area's priority. Higher priority areas are processed first. Default value: 0.

.. _class_Area_property_reverb_bus_amount:

- :ref:`float<class_float>` **reverb_bus_amount**

+----------+--------------------------+
| *Setter* | set_reverb_amount(value) |
+----------+--------------------------+
| *Getter* | get_reverb_amount()      |
+----------+--------------------------+

The degree to which this area applies reverb to its associated audio. Ranges from ``0`` to ``1`` with ``0.1`` precision.

.. _class_Area_property_reverb_bus_enable:

- :ref:`bool<class_bool>` **reverb_bus_enable**

+----------+---------------------------+
| *Setter* | set_use_reverb_bus(value) |
+----------+---------------------------+
| *Getter* | is_using_reverb_bus()     |
+----------+---------------------------+

If ``true``, the area applies reverb to its associated audio.

.. _class_Area_property_reverb_bus_name:

- :ref:`String<class_String>` **reverb_bus_name**

+----------+-----------------------+
| *Setter* | set_reverb_bus(value) |
+----------+-----------------------+
| *Getter* | get_reverb_bus()      |
+----------+-----------------------+

The reverb bus name to use for this area's associated audio.

.. _class_Area_property_reverb_bus_uniformity:

- :ref:`float<class_float>` **reverb_bus_uniformity**

+----------+------------------------------+
| *Setter* | set_reverb_uniformity(value) |
+----------+------------------------------+
| *Getter* | get_reverb_uniformity()      |
+----------+------------------------------+

The degree to which this area's reverb is a uniform effect. Ranges from ``0`` to ``1`` with ``0.1`` precision.

.. _class_Area_property_space_override:

- :ref:`SpaceOverride<enum_Area_SpaceOverride>` **space_override**

+----------+--------------------------------+
| *Setter* | set_space_override_mode(value) |
+----------+--------------------------------+
| *Getter* | get_space_override_mode()      |
+----------+--------------------------------+

Override mode for gravity and damping calculations within this area. See :ref:`SpaceOverride<enum_Area_SpaceOverride>` for possible values.

Method Descriptions
-------------------

.. _class_Area_method_get_collision_layer_bit:

- :ref:`bool<class_bool>` **get_collision_layer_bit** **(** :ref:`int<class_int>` bit **)** const

Returns an individual bit on the layer mask.

.. _class_Area_method_get_collision_mask_bit:

- :ref:`bool<class_bool>` **get_collision_mask_bit** **(** :ref:`int<class_int>` bit **)** const

Returns an individual bit on the collision mask.

.. _class_Area_method_get_overlapping_areas:

- :ref:`Array<class_Array>` **get_overlapping_areas** **(** **)** const

Returns a list of intersecting ``Area``\ s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.

.. _class_Area_method_get_overlapping_bodies:

- :ref:`Array<class_Array>` **get_overlapping_bodies** **(** **)** const

Returns a list of intersecting :ref:`PhysicsBody<class_PhysicsBody>`\ s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.

.. _class_Area_method_overlaps_area:

- :ref:`bool<class_bool>` **overlaps_area** **(** :ref:`Node<class_Node>` area **)** const

If ``true``, the given area overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.

.. _class_Area_method_overlaps_body:

- :ref:`bool<class_bool>` **overlaps_body** **(** :ref:`Node<class_Node>` body **)** const

If ``true``, the given body overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.

.. _class_Area_method_set_collision_layer_bit:

- void **set_collision_layer_bit** **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)**

Set/clear individual bits on the layer mask. This simplifies editing this ``Area``'s layers.

.. _class_Area_method_set_collision_mask_bit:

- void **set_collision_mask_bit** **(** :ref:`int<class_int>` bit, :ref:`bool<class_bool>` value **)**

Set/clear individual bits on the collision mask. This simplifies editing which ``Area`` layers this ``Area`` scans.

